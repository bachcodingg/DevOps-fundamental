name: Build and Deploy Website with Environments

on:
  push:
    branches: [main, develop, staging, 'feature/*']
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test container
        run: |
          echo "üß™ Testing container..."
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          docker run -d -p 3000:80 --name test-container $IMAGE_TAG
          sleep 15
          
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/api/health || echo "000")
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Health check passed!"
          else
            echo "‚ùå Health check failed (HTTP $RESPONSE)"
            docker logs test-container
            exit 1
          fi
          
          docker stop test-container
          docker rm test-container

  # Deploy to Development (automatic for feature branches)
  deploy-development:
    needs: build-and-test
    if: startsWith(github.ref, 'refs/heads/feature/')
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy to Development
        run: |
          echo "üöÄ Deploying to Development Environment"
          echo "Environment: ${{ vars.NODE_ENV }}"
          echo "Log Level: ${{ vars.LOG_LEVEL }}"
          echo "Deployment URL: ${{ vars.DEPLOYMENT_URL }}"
          echo "Database: ${{ secrets.DATABASE_URL }}"
          echo "Health Check Interval: ${{ vars.HEALTH_CHECK_INTERVAL }}ms"

  # Deploy to Staging (automatic for develop branch)
  deploy-staging:
    needs: build-and-test
    if: github.ref == 'refs/heads/develop'
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - name: Deploy to Staging
        run: |
          echo "üöÄ Deploying to Staging Environment"
          echo "Environment: ${{ vars.NODE_ENV }}"
          echo "Log Level: ${{ vars.LOG_LEVEL }}"
          echo "Deployment URL: ${{ vars.DEPLOYMENT_URL }}"
          echo "Health Check Interval: ${{ vars.HEALTH_CHECK_INTERVAL }}ms"
          
          # Example staging deployment
          echo "Pulling image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop"
          # docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop
          # kubectl set image deployment/myapp myapp=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:develop -n staging

  # Deploy to Production (automatic for main branch, with approval)
  deploy-production:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Deploy to Production
        run: |
          echo "üöÄ Deploying to Production Environment"
          echo "Environment: ${{ vars.NODE_ENV }}"
          echo "Log Level: ${{ vars.LOG_LEVEL }}"
          echo "Deployment URL: ${{ vars.DEPLOYMENT_URL }}"
          echo "Health Check Interval: ${{ vars.HEALTH_CHECK_INTERVAL }}ms"
          
          # Example production deployment
          echo "Pulling image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          # docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          # kubectl set image deployment/myapp myapp=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest -n production
          
      - name: Notify deployment success
        run: |
          echo "‚úÖ Production deployment completed successfully!"
          # curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
          #   -H 'Content-type: application/json' \
          #   --data '{"text":"üöÄ Production deployment successful for commit ${{ github.sha }}"}'

  # Manual deployment (uses workflow_dispatch input)
  deploy-manual:
    needs: build-and-test
    if: github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Deploy to Selected Environment
        run: |
          echo "üöÄ Manual deployment to: ${{ github.event.inputs.environment }}"
          echo "Environment: ${{ vars.NODE_ENV }}"
          echo "Log Level: ${{ vars.LOG_LEVEL }}"
          echo "Deployment URL: ${{ vars.DEPLOYMENT_URL }}"
