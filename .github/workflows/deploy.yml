name: Build and Deploy Website - Multi Branch

# üéØ TRIGGER: Multiple branches and events
on:
  push:
    branches: [ main, master, develop, staging, feature/* ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:  # Manual trigger
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'

# Environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # For manual trigger, checkout the specified branch
          ref: ${{ github.event.inputs.branch || github.ref }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      # üè∑Ô∏è SMART TAGGING: Different tags for different branches
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # Main branch gets 'latest' tag
            type=raw,value=latest,enable={{is_default_branch}}
            # Branch name as tag (e.g., develop, staging)
            type=ref,event=branch
            # PR number for pull requests
            type=ref,event=pr
            # Commit SHA with branch prefix
            type=sha,prefix={{branch}}-
            # Custom tag for feature branches
            type=match,pattern=feature/(.*),group=1,prefix=feature-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # üöÄ Build args for different environments
          build-args: |
            NODE_ENV=${{ github.ref == 'refs/heads/main' && 'production' || 'development' }}
            BRANCH_NAME=${{ github.ref_name }}
      
      # üß™ ENVIRONMENT-SPECIFIC TESTING
      - name: Test container
        run: |
          echo "üß™ Testing container for branch: ${{ github.ref_name }}"
          
          # Get the first tag from metadata
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "Using image: $IMAGE_TAG"
          
          # Start container
          docker run -d -p 3000:80 --name test-container $IMAGE_TAG
          sleep 15
          
          # Health check
          echo "üì° Testing website response..."
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000)
          
          if [ "$RESPONSE" = "200" ]; then
            echo "‚úÖ Website is responding correctly (HTTP $RESPONSE)"
          else
            echo "‚ùå Website failed health check (HTTP $RESPONSE)"
            docker logs test-container
            exit 1
          fi
          
          # Additional tests for production
          if [ "${{ github.ref_name }}" = "main" ]; then
            echo "üîç Running additional production tests..."
            # Test specific endpoints
            curl -f http://localhost:3000/health || echo "‚ö†Ô∏è Health endpoint not found"
            curl -f http://localhost:3000/api/status || echo "‚ö†Ô∏è API status endpoint not found"
          fi
          
          # Clean up
          echo "üßπ Cleaning up test container..."
          docker stop test-container
          docker rm test-container
      
      # üè∑Ô∏è CREATE RELEASE FOR MAIN BRANCH
      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release v${{ github.run_number }}
          body: |
            üöÄ Automated release from main branch
            
            **Changes in this release:**
            - Built from commit: ${{ github.sha }}
            - Docker image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            
            **How to use:**
            ```bash
            docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker run -p 3000:80 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ```
          draft: false
          prerelease: false

  # üöÄ DEPLOYMENT JOB (runs after build-and-test)
  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    strategy:
      matrix:
        environment: 
          - ${{ github.ref_name == 'main' && 'production' || github.ref_name == 'develop' && 'staging' || 'development' }}
    
    environment: ${{ matrix.environment }}
    
    steps:
      - name: Deploy to ${{ matrix.environment }}
        run: |
          echo "üöÄ Deploying to ${{ matrix.environment }} environment"
          echo "Branch: ${{ github.ref_name }}"
          echo "Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}"
          
          # Here you would add your actual deployment commands
          # For example:
          # - Deploy to Kubernetes
          # - Update Docker Compose
          # - Trigger deployment webhook
          # - Update environment variables
          
          echo "‚úÖ Deployment to ${{ matrix.environment }} completed!"

      - name: Success message
        run: |
          echo "üéâ Workflow completed successfully!"
          echo "üì¶ Built and tested: ${{ github.ref_name }} branch"
          echo "üê≥ Docker image pushed to: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}"
          echo "üåê Available tags: ${{ needs.build-and-test.outputs.tags }}"
